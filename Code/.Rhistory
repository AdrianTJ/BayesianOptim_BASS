data(Boston)
housing <- as.data.frame(Boston)
# Split the data into training and testing sets
set.seed(123)
train_indices <- sample(1:nrow(housing), 0.7 * nrow(housing))
train_data <- housing[train_indices, ]
test_data <- housing[-train_indices, ]
# Preprocess the data (scale and center)
train_data_scaled <- scale(train_data[, -c(14)])
test_data_scaled <- scale(test_data[, -c(14)])
# Create matrices for the predictors and response variables
x_train <- as.matrix(train_data_scaled[, -c(14)])
y_train <- train_data_scaled[, 14]
# Load the Boston housing dataset
housing <- as.data.frame(Boston)
# Split the data into training and testing sets
set.seed(123)
train_indices <- sample(1:nrow(housing), 0.7 * nrow(housing))
train_data <- housing[train_indices, ]
test_data <- housing[-train_indices, ]
# Preprocess the data (scale and center)
train_data_scaled <- scale(train_data[, -14])  # Exclude the response variable (column 14)
test_data_scaled <- scale(test_data[, -14])  # Exclude the response variable (column 14)
# Create matrices for the predictors and response variables
x_train <- as.matrix(train_data_scaled[, -14])  # Exclude the response variable (column 14)
y_train <- train_data_scaled[, 14]  # Select only the response variable (column 14)
train_data_scaled
View(train_data_scaled)
View(Boston)
# Load the Boston housing dataset
housing <- as.data.frame(Boston)
# Split the data into training and testing sets
set.seed(123)
train_indices <- sample(1:nrow(housing), 0.7 * nrow(housing))
train_data <- housing[train_indices, ]
test_data <- housing[-train_indices, ]
# Preprocess the data (scale and center)
train_data_scaled <- scale(train_data[, -14])  # Exclude the response variable (column 14)
test_data_scaled <- scale(test_data[, -14])  # Exclude the response variable (column 14)
# Create matrices for the predictors and response variables
x_train <- as.matrix(train_data_scaled[, -14])  # Exclude the response variable (column 14)
y_train <- train_data[, 14]  # Select only the response variable (column 14)
x_test <- as.matrix(test_data_scaled[, -14])  # Exclude the response variable (column 14)
y_test <- test_data[, 14]  # Select only the response variable (column 14)
# Perform elastic net regression
enet_model <- glmnet(x_train, y_train, alpha = 0.5)  # alpha = 0.5 for balanced elastic net
# Predict on the test set
enet_predictions <- predict(enet_model, newx = x_test)
# Calculate the root mean squared error (RMSE) on the test set
rmse <- sqrt(mean((enet_predictions - y_test)^2))
cat("RMSE:", rmse)
?glmnet
plot(enet_model)
?BASS
?bass
?bass
y<-rnorm(n,f(x),sigma)
## simulate data (Friedman function)
f<-function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma<-1 # noise sd
n<-500 # number of observations
x<-matrix(runif(n*10),n,10) #10 variables, only first 5 matter
y<-rnorm(n,f(x),sigma)
## simulate data (Friedman function)
f<-function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma<-1 # noise sd
n<-500 # number of observations
x<-matrix(runif(n*10),n,10) #10 variables, only first 5 matter
y<-rnorm(n,f(x),sigma)
## simulate data (Friedman function)
f<-function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma<-1 # noise sd
n<-500 # number of observations
x<-matrix(runif(n*10),n,10) #10 variables, only first 5 matter
y<-rnorm(n,f(x),sigma)
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
## simulate data (Friedman function)
f<-function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma<-1 # noise sd
n<-500 # number of observations
x<-matrix(runif(n*10),n,10) #10 variables, only first 5 matter
y<-rnorm(n,f(x),sigma)
## simulate data (Friedman function)
f<-function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma<-1 # noise sd
n<-500 # number of observations
x<-matrix(runif(n*10),n,10) #10 variables, only first 5 matter
y<-rnorm(n,f(x),sigma)
```{r}
## simulate data (Friedman function)
f<-function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma<-1 # noise sd
n<-500 # number of observations
x<-matrix(runif(n*10),n,10) #10 variables, only first 5 matter
y<-rnorm(n,f(x),sigma)
View(x)
View(x)
# Create a sample dataset with a categorical variable
data <- data.frame(
x1 = c(1, 2, 3, 4, 5),
x2 = c("A", "B", "C", "A", "B"),
y = c(2, 4, 3, 6, 5)
)
# Encode the categorical variable as a factor
data$x2 <- factor(data$x2)
# Fit a BASS model with categorical variable
model <- bass(y ~ bass(x1) + bass(x2), data = data)
library(BASS)
# Create a sample dataset with a categorical variable
data <- data.frame(
x1 = c(1, 2, 3, 4, 5),
x2 = c("A", "B", "C", "A", "B"),
y = c(2, 4, 3, 6, 5)
)
# Encode the categorical variable as a factor
data$x2 <- factor(data$x2)
# Fit a BASS model with categorical variable
model <- bass(y ~ bass(x1) + bass(x2), data = data)
# Fit a BASS model with categorical variable
model <- bass(y ~ bass(x1) + bass(x2))
# Summarize the model
summary(model)
View(data)
10 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 3] - 0.5)^2 + 10 * x[, 4] + 5 * x[, 5]
# Simulate data using the Friedman function with discrete variables
f <- function(x) {
10 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 3] - 0.5)^2 + 10 * x[, 4] + 5 * x[, 5]
}
sigma <- 1  # Noise standard deviation
n <- 500  # Number of observations
x <- matrix(runif(n * 10), n, 10)  # 10 variables, only first 5 matter
x[, 3] <- sample(c("A", "B", "C"), n, replace = TRUE)  # Discrete variable (sample from categories)
y <- rnorm(n, f(x), sigma)
# Simulate data using the Friedman function with discrete variables
f <- function(x) {
10 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 3] - 0.5)^2 + 10 * x[, 4] + 5 * x[, 5]
}
sigma <- 1  # Noise standard deviation
n <- 500  # Number of observations
x <- matrix(runif(n * 10), n, 10)  # 10 variables, only first 5 matter
x[, 3] <- sample(c("A", "B", "C"), n, replace = TRUE)  # Discrete variable (sample from categories)
y <- rnorm(n, f(x), sigma)
# Simulate data using the Friedman function with discrete variables
f <- function(x) {
10 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 3] - 0.5)^2 + 10 * x[, 4] + 5 * x[, 5]
}
sigma <- 1  # Noise standard deviation
n <- 500  # Number of observations
x <- matrix(runif(n * 10), n, 10)  # 10 variables, only first 5 matter
x[, 11] <- sample(c("A", "B", "C"), n, replace = TRUE)  # Discrete variable (sample from categories)
# Simulate data using the Friedman function with discrete variables
f <- function(x) {
10 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 3] - 0.5)^2 + 10 * x[, 4] + 5 * x[, 5]
}
sigma <- 1  # Noise standard deviation
n <- 500  # Number of observations
x <- matrix(runif(n * 10), n, 10)  # 10 variables, only first 5 matter
x[, 11] <- sample(c("A", "B", "C"), n, replace = TRUE)  # Discrete variable (sample from categories)
x[, 11] <- sample(c("A", "B", "C"), n, replace = TRUE)  # Discrete variable (sample from categories)
x <- matrix(runif(n * 10), n, 11)  # 10 variables, only first 5 matter
View(x)
x[, 11] <- sample(c("A", "B", "C"), n, replace = TRUE)  # Discrete variable (sample from categories)
y <- rnorm(n, f(x), sigma)
# Simulate data using the Friedman function with discrete variables
f <- function(x) {
10 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 3] - 0.5)^2 + 10 * x[, 4] + 5 * x[, 5]
}
sigma <- 1  # Noise standard deviation
n <- 500  # Number of observations
x <- matrix(runif(n * 10), n, 11)  # 10 variables, only first 5 matter
x[, 11] <- sample(c("A", "B", "C"), n, replace = TRUE)  # Discrete variable (sample from categories)
x <- matrix(runif(n * 10), n, 10)  # 10 variables, only first 5 matter
x[, 11] <- sample(c("A", "B", "C"), n, replace = TRUE)  # Discrete variable (sample from categories)
x <- dataframe(runif(n * 10), n, 10)  # 10 variables, only first 5 matter
x <- (runif(n * 10), n, 10)  # 10 variables, only first 5 matter
x <- data.frame(runif(n * 10), n, 10)  # 10 variables, only first 5 matter
x[, 11] <- sample(c("A", "B", "C"), n, replace = TRUE)  # Discrete variable (sample from categories)
View(x)
x <- matrix(runif(n * 10), n, 10)  # 10 variables, only first 5 matter
x_df <- data.frame(x)
View(x_df)
x_df[, 11] <- sample(c("A", "B", "C"), n, replace = TRUE)  # Discrete variable (sample from categories)
y <- rnorm(n, f(x), sigma)
View(x_df)
# Fit BASS without tempering
mod <- bass(x_df, y)
# Fit BASS without tempering
mod <- bass(x, y)
plot(mod)
plot(mod)
# Fit BASS without tempering
mod <- bass(x, y)
View(data)
View(mod)
x_df[, 11] <- factor(sample(c("A", "B", "C"), n, replace = TRUE))  # Discrete variable (sample from categories)
y <- rnorm(n, f(x), sigma)
View(x_df)
x_df$V11
type(x_df$V11)
20 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 3] - 0.5)^2 + 10 * x[, 4] + 5 * x[, 5]
# Simulate data using the Friedman function with discrete variables
f <- function(x) {
if (x[, 11] == "A"){
10 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 3] - 0.5)^2 + 10 * x[, 4] + 5 * x[, 5]
} else{
20 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 3] - 0.5)^2 + 10 * x[, 4] + 5 * x[, 5]
}
}
sigma <- 1  # Noise standard deviation
n <- 500  # Number of observations
x <- matrix(runif(n * 10), n, 10)  # 10 variables, only first 5 matter
x_df <- data.frame(x)
x_df[, 11] <- factor(sample(c("A", "B", "C"), n, replace = TRUE))  # Discrete variable (sample from categories)
y <- rnorm(n, f(x), sigma)
library(BASS)
# Simulate data using the Friedman function with discrete variables
f <- function(x) {
if (x[, 11] == "A"){
10 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 3] - 0.5)^2 + 10 * x[, 4] + 5 * x[, 5]
} else{
20 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 3] - 0.5)^2 + 10 * x[, 4] + 5 * x[, 5]
}
}
sigma <- 1  # Noise standard deviation
n <- 500  # Number of observations
x <- matrix(runif(n * 10), n, 10)  # 10 variables, only first 5 matter
x_df <- data.frame(x)
x_df[, 11] <- factor(sample(c("A", "B", "C"), n, replace = TRUE))  # Discrete variable (sample from categories)
y <- rnorm(n, f(x), sigma)
y <- rnorm(n, f(x_df), sigma)
# Simulate data using the Friedman function with discrete variables
f <- function(x) {
ifelse(x[, 11] == "A",
10 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 3] - 0.5)^2 + 10 * x[, 4] + 5 * x[, 5],
20 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 3] - 0.5)^2 + 10 * x[, 4] + 5 * x[, 5])
}
sigma <- 1  # Noise standard deviation
n <- 500  # Number of observations
x <- matrix(runif(n * 10), n, 10)  # 10 variables, only first 5 matter
x_df <- data.frame(x)
x_df[, 11] <- factor(sample(c("A", "B", "C"), n, replace = TRUE))  # Discrete variable (sample from categories)
y <- rnorm(n, f(x_df), sigma)
# Fit BASS without tempering
mod <- bass(x, y)
plot(mod)
# Fit BASS with tempering
mod <- bass(x, y, temp.ladder = 1.3^(0:8), start.temper = 1000)
plot(mod)
# Prediction
npred <- 1000
xpred <- matrix(runif(npred * 10), npred, 10)
xpred[, 3] <- sample(c("A", "B", "C"), npred, replace = TRUE)  # Discrete variable in prediction set
pred <- predict(mod, xpred, verbose = TRUE)  # Posterior predictive samples
# Simulate data using the Friedman function with discrete variables
f <- function(x) {
ifelse(x[, 11] == "A",
10 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 3] - 0.5)^2 + 10 * x[, 4] + 5 * x[, 5],
20 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 3] - 0.5)^2 + 10 * x[, 4] + 5 * x[, 5])
}
sigma <- 1  # Noise standard deviation
n <- 500  # Number of observations
x <- matrix(runif(n * 10), n, 10)  # 10 variables, only first 5 matter
x_df <- data.frame(x)
x_df[, 11] <- factor(sample(c("A", "B", "C"), n, replace = TRUE))  # Discrete variable (sample from categories)
y <- rnorm(n, f(x_df), sigma)
# Fit BASS without tempering
mod <- bass(x, y)
plot(mod)
# Fit BASS without tempering
mod <- bass(x_df, y)
plot(mod)
# Simulate data using the Friedman function with discrete variables
f <- function(x) {
ifelse(x[, 11] == "A",
10 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 3] - 0.5)^2 + 10 * x[, 4] + 5 * x[, 5],
20 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 3] - 0.5)^2 + 10 * x[, 4] + 5 * x[, 5])
}
sigma <- 1  # Noise standard deviation
n <- 500  # Number of observations
x <- matrix(runif(n * 10), n, 10)  # 10 variables, only first 5 matter
x_df <- data.frame(x)
x_df[, 11] <- factor(sample(c("A", "B", "C"), n, replace = TRUE))  # Discrete variable (sample from categories)
y <- rnorm(n, f(x_df), sigma)
# Fit BASS without tempering
mod <- bass(x_df, y)
plot(mod)
x_df[, 11]
levels(x_df[, 11])
x_df[1, 11]
string(x_df[1, 11])
as.string(x_df[1, 11])
string(x_df[1, 11])
x_df[1, 11] == "C"
# Fit BASS without tempering
mod <- bass(x_df, y, verbose = FALSE,)
# Fit BASS without tempering
mod <- bass(x_df, y, verbose = FALSE,)
plot(mod)
View(y)
y
plot(y)
hist(y)
get_bass_2d <- function(max_iterations = 10){
n0 <- 10
dims <- 2
x <- matrix(runif(n0 * dims), n0, dims)
x_df <- data.frame(x)
x_df[, 3] <- factor(sample(c("A", "B", "C"), n0, replace = TRUE))
y <- rnorm(n0, f(x_df), sigma)
for (iteration in 1:max_iterations) {
fit <- bass(x_df, y, verbose = FALSE)
x_new <- matrix(runif(1000 * dims), 1000, dims)
x_new_df <- data.frame(x_new)
x_new_df[, 3] <- factor(sample(c("A", "B", "C"), 1000, replace = TRUE))
pred <- predict(fit, newdata = x_new_df)
mu <- apply(pred, 2, mean)
kappa <- 9 # tunable
sigma <- apply(pred, 2, sd)
lower_confidence_bound <- mu - kappa * sigma
selected_index <- which.min(lower_confidence_bound)
x_selected <- x_new[selected_index, ]
y_selected <- rnorm(1, f(data.frame(x_selected)), sigma)
x <- rbind(x, x_selected)
x_df <- rbind(x_df, data.frame(x_selected))
y <- append(y, y_selected)
print(iteration)
}
return(y)
}
# Call the modified function
get_bass_2d()
```{r}
f <- function(x) {
ifelse(x[, 3] == "A",
10 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 1] - 0.5)^2 + 10 * x[, 2] + 5 * x[, 1],
20 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 1] - 0.5)^2 + 10 * x[, 2] + 5 * x[, 1])
}
get_bass_2d <- function(max_iterations = 10){
n0 <- 10
dims <- 2
x <- matrix(runif(n0 * dims), n0, dims)
x_df <- data.frame(x)
x_df[, 3] <- factor(sample(c("A", "B", "C"), n0, replace = TRUE))
y <- rnorm(n0, f(x_df), sigma)
for (iteration in 1:max_iterations) {
fit <- bass(x_df, y, verbose = FALSE)
x_new <- matrix(runif(1000 * dims), 1000, dims)
x_new_df <- data.frame(x_new)
x_new_df[, 3] <- factor(sample(c("A", "B", "C"), 1000, replace = TRUE))
pred <- predict(fit, newdata = x_new_df)
mu <- apply(pred, 2, mean)
kappa <- 9 # tunable
sigma <- apply(pred, 2, sd)
lower_confidence_bound <- mu - kappa * sigma
selected_index <- which.min(lower_confidence_bound)
x_selected <- x_new[selected_index, ]
y_selected <- rnorm(1, f(data.frame(x_selected)), sigma)
x <- rbind(x, x_selected)
x_df <- rbind(x_df, data.frame(x_selected))
y <- append(y, y_selected)
print(iteration)
}
return(y)
}
# Call the modified function
get_bass_2d()
library(lhs)
f <- function(x) {
ifelse(x[, 3] == "A",
10 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 1] - 0.5)^2 + 10 * x[, 2] + 5 * x[, 1],
20 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 1] - 0.5)^2 + 10 * x[, 2] + 5 * x[, 1])
}
get_bass_2d <- function(max_iterations = 10){
n0 <- 10
dims <- 2
x <- matrix(runif(n0 * dims), n0, dims)
x_df <- data.frame(x)
x_df[, 3] <- factor(sample(c("A", "B", "C"), n0, replace = TRUE))
y <- rnorm(n0, f(x_df), sigma)
for (iteration in 1:max_iterations) {
fit <- bass(x_df, y, verbose = FALSE)
x_new <- maximinLHS(1000,dims)
x_new_df <- data.frame(x_new)
x_new_df[, 3] <- factor(sample(c("A", "B", "C"), 1000, replace = TRUE))
pred <- predict(fit, newdata = x_new_df)
mu <- apply(pred, 2, mean)
kappa <- 9 # tunable
sigma <- apply(pred, 2, sd)
lower_confidence_bound <- mu - kappa * sigma
selected_index <- which.min(lower_confidence_bound)
x_selected <- x_new[selected_index, ]
y_selected <- rnorm(1, f(data.frame(x_selected)), sigma)
x <- rbind(x, x_selected)
x_df <- rbind(x_df, data.frame(x_selected))
y <- append(y, y_selected)
print(iteration)
}
return(y)
}
# Call the modified function
get_bass_2d()
f <- function(x) {
ifelse(x[, 3] == "A",
10 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 1] - 0.5)^2 + 10 * x[, 2] + 5 * x[, 1],
20 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 1] - 0.5)^2 + 10 * x[, 2] + 5 * x[, 1])
}
n0 <- 10
dims <- 2
x <- matrix(runif(n0 * dims), n0, dims)
x_df <- data.frame(x)
x_df[, 3] <- factor(sample(c("A", "B", "C"), n0, replace = TRUE))
y <- rnorm(n0, f(x_df), sigma)
View(x_df)
View(x_df)
y <- rnorm(n0, f(x_df), sigma)
sigma <- 1  # Noise standard deviation
n0 <- 10
dims <- 2
x <- matrix(runif(n0 * dims), n0, dims)
x_df <- data.frame(x)
x_df[, 3] <- factor(sample(c("A", "B", "C"), n0, replace = TRUE))
y <- rnorm(n0, f(x_df), sigma)
fit <- bass(x_df, y, verbose = FALSE)
x_new <- maximinLHS(10,dims)
x_new <- maximinLHS(2,dims)
View(x_new)
x_new <- maximinLHS(10,dims)
View(x_new)
x_new_df <- data.frame(x_new)
x_new_df[, 3] <- factor(sample(c("A", "B", "C"), 1000, replace = TRUE))
x_new_df[, 3] <- factor(sample(c("A", "B", "C"), 10, replace = TRUE))
pred <- predict(fit, newdata = x_new_df)
View(x_new)
View(x_new_df)
f <- function(x) {
ifelse(x[, 3] == "A",
10 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 1] - 0.5)^2 + 10 * x[, 2] + 5 * x[, 1],
20 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 1] - 0.5)^2 + 10 * x[, 2] + 5 * x[, 1])
}
sigma <- 1  # Noise standard deviation
n0 <- 10
dims <- 2
x <- matrix(runif(n0 * dims), n0, dims)
x_df <- data.frame(x)
x_df[, 3] <- factor(sample(c("A", "B", "C"), n0, replace = TRUE))
y <- rnorm(n0, f(x_df), sigma)
fit <- bass(x_df, y, verbose = FALSE)
x_new <- maximinLHS(10,dims)
x_new_df <- data.frame(x_new)
x_new_df[, 3] <- factor(sample(c("A", "B", "C"), 10, replace = TRUE))
pred <- predict(fit, newdata = x_new_df)
View(x_new_df)
pred <- predict(fit, newdata = data.frame(x = x_new_df))
mu <- apply(pred, 2, mean)
pred <- predict(fit, newdata = data.frame(x = x_new_df))
mu <- apply(pred, 2, mean)
pred <- predict(fit, newdata = data.frame(x = x_new_df))
library(lhs)
library(BASS)
library(lhs)
f <- function(x) {
ifelse(x[, 3] == "A",
10 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 1] - 0.5)^2 + 10 * x[, 2] + 5 * x[, 1],
20 * sin(pi * x[, 1] * x[, 2]) + 20 * (x[, 1] - 0.5)^2 + 10 * x[, 2] + 5 * x[, 1])
}
sigma <- 1  # Noise standard deviation
n0 <- 10
dims <- 2
x <- matrix(runif(n0 * dims), n0, dims)
x_df <- data.frame(x)
x_df[, 3] <- factor(sample(c("A", "B", "C"), n0, replace = TRUE))
y <- rnorm(n0, f(x_df), sigma)
fit <- bass(x_df, y, verbose = FALSE)
x_new <- maximinLHS(10,dims)
x_new_df <- data.frame(x_new)
x_new_df[, 3] <- factor(sample(c("A", "B", "C"), 10, replace = TRUE))
pred <- predict(fit, newdata = data.frame(x = x_new_df))
mu <- apply(pred, 2, mean)
library(BASS)
library(lhs)
f <- function(x) {
ifelse(x[, 3] == "A",
10 * sin(pi * x[, 1] * x[, 2]) +
10 * (x[, 1] - 0.5)^2 +
10 * x[, 2] + 5 * x[, 1],
20 * sin(pi * x[, 1] * x[, 2]) +
20 * (x[, 1] - 0.5)^2 +
20 * x[, 2] + 5 * x[, 1])
}
sigma <- 1  # Noise standard deviation
n0 <- 10
dims <- 2
x <- matrix(runif(n0 * dims), n0, dims)
x_df <- data.frame(x)
x_df[, 3] <- factor(sample(c("A", "B", "C"), n0, replace = TRUE))
y <- rnorm(n0, f(x_df), sigma)
fit <- bass(x_df, y, verbose = FALSE)
x_new <- maximinLHS(10,dims)
x_new_df <- data.frame(x_new)
x_new_df[, 3] <- factor(sample(c("A", "B", "C"), 10, replace = TRUE))
